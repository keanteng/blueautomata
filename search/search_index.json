{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc4b Welcome to BlueAutomata","text":"BlueAutomata"},{"location":"#introduction","title":"Introduction","text":"<p>Reporting is common in financial institution to ensure their operations are compliant and transparent. It also helps in decision-making to build trust, manage risk and informed decision. Workflows for reporting generally involves gathering raw data, cleaning of raw data and compiling raw data into their respective template using Microsoft Excel. For large organization, such procedure can be repetitive, lackluster and time-consuming. Oftentimes, mistakes could be made when dealing with large number of raw data during these processes due to human errors.</p> <p>Thus, <code>blueautomata</code> is introduced as a package to provide a framework to ease the workflow for reporting in a company. This package aims to automate the workflow of cleaning data, compiling data and preparing the data in reportable format on Excel by auto-calling the corresponding VBA function.</p> <pre><code>---\ntitle: Package Algorithm\n---\nflowchart TD\n    subgraph main\n    A[Raw Data] --&gt; B{Cleaning}\n    C[Compiling Cleaned Data] --No--&gt; D[Organize Data By Category]\n    D[Organize Data By Category] --&gt; E[Create Template]\n    end\n\n    subgraph sub1\n    B[Cleaning] --&gt; B1[User ID Matching]\n    B1[User ID Matching] --&gt; B2[User Name Reverse Lookup]\n    B2[User Name Reverse Lookup] --&gt; B3[Conditional Filterings]\n    B3[Conditional Filterings] --&gt; B4[Granularity Provisioning]\n    B4[Granularity Provisioning] --&gt; C[Compiling Cleaned Data]\n    end\n\n    subgraph sub2\n    B[Cleaning] --If Required--&gt; B11[Fuzzywuzzy Matching]\n    B11[fuzzywuzzy Matching] --&gt; B12[Update Data]\n    B12[Update Data]--&gt; B13[sub1 Process]\n    B13[sub1 Process] --&gt; C[Compiling Cleaning Data]\n    end\n\n    subgraph sub3\n    B[Cleaning] --If Required--&gt; B21[Output Foresight Reporting]\n    end\n\n    subgraph sub4\n    C[Compiling Cleaned Data] --Yes--&gt; C1[Data Labels Checker]\n    C1[Data Labels Checker] --&gt; D[Output Data By Category]\n    end </code></pre>"},{"location":"#installation","title":"Installation","text":"<ul> <li> <p>On Windows Terminal Terminal<pre><code>py -m pip install blueautomata\n</code></pre></p> </li> <li> <p>Latest development version Terminal<pre><code>pip install git+https://github.com/keanteng/blueautomata\n</code></pre></p> </li> </ul>"},{"location":"#package-functions","title":"Package Functions","text":"<ol> <li>Data Compilation <ol> <li>Data cleaning such as renaming columns and conditional filtering</li> <li>Data lookup and matching support<ol> <li>Auto reverse lookup to update mislabelled cells</li> </ol> </li> <li>Auto <code>fuzzywuzzy</code> matching and update for similar data</li> </ol> </li> <li>Exports large dataset into categorized files </li> <li>Template creation for categorized files (report template) by calling written macros on Excel</li> </ol>"},{"location":"casestudy/","title":"A Case Study","text":"<p>Info</p> <p>Let's read a story.<sup>1</sup> to see how this package is inspired \ud83d\udd25</p>"},{"location":"casestudy/#getting-a-new-job","title":"Getting a New Job","text":"<p>In the year 2055, a guy named Travis Umbrella.<sup>2</sup> become the Manager of LightSpeed Investment under the Department of Data Management. At that time, Travis is in his forties, and he studies Economics back in college. Previously, he works as the Manager under the Department of Investment. Well, he is an adventurous person and dare to try something new, so when opportunities come, he decided to advance in the field of managing data to get some new perspective in his work. </p> <p>In fact, Travis works in a weird company where the company makes investment in a weird way but with a high return. The company gives stocks to the employee so that they can sell in stock markets. around the world.<sup>3</sup> </p> <p>For each employee, they can only receive one type of stock like Google <code>GOOG</code>, but they are allowed to sell in a few markets such as New York Stock Exchange <code>NYSE</code> and Hong Kong Stock Exchange <code>HKSE</code>. Travis does not concern with whether the employee can make money or not or how many stocks each employee received since it is not part of his job.</p> <p>Every month, Travis needs to submit a report for auditing where he needs to track down the employees stock holding type and the market that they sell their stock. Well, LightSpeed Investment is a fast-moving company, where employees come and go. So at the end of the month when Travis submits his report he has to make sure that employees that resigned should not be included in his report.</p>"},{"location":"casestudy/#time-for-action","title":"Time For Action","text":"<p>For Travis to complete his report he would first need to get hold of the stocks' data that are traded by the firms' employees in worldwide stock markets. He then stored the transactions record for each stock market in an individual file. Since there is no well-build system for the data collection, each of the file looks different, some contains more columns than the other, some with missing information such as employees' name and some even contains wrong employee IDs and outdated information. </p> <p>Travis realizes that he would need some other data to validate his collected data, so he reached out to his friend, James Claude Diamond from the Fake Human Resources Department<sup>4</sup> to get the latest copy of the staff data where it contains the staff's assigned stocks and stock market that they can sell their stock. He also compiles a copy of checklist data by himself to match up the stock code and stock market code to their respective stock name and stock market name.</p>"},{"location":"casestudy/#think-different","title":"Think Different","text":"<p>Travis is good at math and logical thinking, so he knows for resigned employees their names will not be in the staff dataset. In fact, what he will do is he will match the staff ID from the stock market data he collected with the staff data to obtain information as follows:</p> <ul> <li>The staff's name</li> <li>The staff's assigned stock</li> <li>The staff's status (resigned or not)</li> <li>The staff's cube<sup>5</sup></li> </ul> <p>That approach, allows him to work quickly to compile the data he collects from the stock markets, what he will do then, is to create files for each stock category to see where they are traded around the world - of course with a nice looking template before submitting for audit review after the quarter ends!</p> <ol> <li> <p>The case study is purely a creative endeavor and should not be interpreted as a representation of reality. Any opinions, beliefs, or ideologies expressed within the story do not reflect those of the author or any other entity mentioned herein.\u00a0\u21a9</p> </li> <li> <p>This story is a work of fiction. Names, characters, places, and incidents are the products of the author's imagination or are used fictitiously. Any resemblance to actual events, locales, or persons, living or dead, is entirely coincidental.\u00a0\u21a9</p> </li> <li> <p>It is year 2055, the markets and the world might look different that what we see today.\u00a0\u21a9</p> </li> <li> <p>In this human resource department, the staff uses a generator to generate fake identities for the staff\u00a0\u21a9</p> </li> <li> <p>Cube is a special code available to some staffs when they sell their stock, In the concepts page, checklist 2, you can see that each code will correspond to a movie name.\u00a0\u21a9</p> </li> </ol>"},{"location":"concepts/","title":"Package Concepts \ud83e\udde0","text":"<p>Info<p>Let's continue to explore on how Travis solved his problems at work \ud83d\udca1</p> </p>"},{"location":"concepts/#travis-umbrella-thinks-differently","title":"Travis Umbrella Thinks Differently","text":""},{"location":"concepts/#check-what-you-have","title":"Check What You Have","text":"<p>Let's take a look at the data that Travis is able to gather before starting to compile everything. He currently has a copy of staff data, checklist data (contains abbreviations references used firm wide) and the raw data from the stock markets. </p> <p>Note: The below list shows only a portion of the data</p> Staff DataChecklist 1Checklist 2 LAN ID Name Email Department R2J0PNN64H944P26B Vanessa Sanchez scottkyle@example.com Google 95F33XSJ5HEK4WCMX Jordan Harris uvasquez@example.net Google 4F244SMY5SPZPD94K Jennifer Jimenez nathan14@example.net Google Department Dept Code Google GOOG Apple AAPL Microsoft MSFT Amazon AMZN cube cube_name 791745 The Midnight Serenade 692791 Starlight Dreams 568621 City of Whispers 580051 Lost in Time <p>Here is an overview of the raw data.<sup>1</sup> he collects from the stock markets:</p> NASDAQNYSESGXSSETSE Department Dept User ID Name Cube Google GOOG R2J0PNN64H944P26B NaN 969122 Google NaN 95F33XSJ5HEK4WCMX Jordan Harris 676021 NaN GOOG 4F244SMY5SPZPD94K Jennifer Jimenez 322610 Department Dept User ID Name STATSMART CUBE Microsoft NaN UJHCDGW5XVREEHTJ6 Danielle Knox NaN MSFT J9NMAJ9NXRDB8H9VV Todd Rosales Microsoft MSFT LUSH4YFM198L0T17C NaN Department Dept User ID Name role code Netflix NFLX 987E0H186K7MVTWMC NaN Netflix NaN P6X9P4F89XJVX49B5 Diamond James NaN NFLX 5KVGRVCD65TK6HUEZ Maria Green Department Dept User ID Name Cube Disable Flag * Spotify NaN 81524ER47JWRG1LJ5 Aaron Brooks Y Snapchat SNAP ZH09GRB41XCBUY5UH NaN Y NaN SNAP UNX8J7UK4SR394FXW Valerie Thompson Y Department Dept User ID Name Cube Status Slack NaN WJYSG3S324FG716B2 Mary Barry *ENABLED Square SQ 5CJLUSHR0ZB7WC1N7 NaN *ENABLED"},{"location":"concepts/#identify-the-pattern","title":"Identify The Pattern","text":"<p>Travis is quick to find patterns in his collected raw data, he noticed that although there are empty cells about the staff name, department and department code, the staff ID is always recorded whenever transaction is performed. Of course, with the staff data on his hand, he can then learn about the stock that the staff used. </p> <p>Moreover, although staff data does not tell him about the department code, but it does tell him the staff department name where he can then make reference to his checklist data for the department code. Well, he can also reference the <code>cube</code> code on his checklist for the name of the code.</p>"},{"location":"concepts/#solution","title":"Solution","text":"<p>He formulates a plan for his reporting workflows and this algorithm is able to process a majority of his datasets:</p> <pre><code>---\ntitle: Algorithm1\n---\n    flowchart TD\n    subgraph LOOP\n        subgraph for_each_file\n        direction TB\n        A[Match stock market data IDs with staff data IDs] --&gt; B[Conditional Filtering]\n        B[Conditional Filtering] --&gt; C[Update the staff name and department]\n        C[Update the staff name and department] --&gt; D[Match Department with Department Code]\n        D[Match Department with Department Code] --&gt; E[Match Cube with Cube Name]\n        end\n    end\n</code></pre> <p>But there are still some datasets that still not able to process by his program, so Travis decides to devise a separate algorithm for some non-routine datasets.</p>"},{"location":"concepts/#some-worse-case","title":"Some Worse Case","text":"<p>Warning</p> <p>Real world data does not appear to be that clean, let's take a look at some non-routine cases</p>"},{"location":"concepts/#inconsistent-data-entry","title":"Inconsistent Data Entry","text":"<p>Travis noticed that on one of the data he collected from <code>HKSE</code> the name of the staff does not match with the company staff directory, for example \"Muhamad Ali bin Abu\" is named as \"Muhamad Ali Abu\"; \"Lucas Den Shi Ki\" is named as \"Lucas Shi Ki Den\". And in the dataset, there is no IDs column and only name column:</p> HKSEActual Name Name Den Shi Ki Lucas Muhamad Ali Abu Jef A_DriaN Name Lucas Shi Ki Den Muhamad Ali  bin Abu Jef Adrian <p>To resolve this, he has to rely on a metric, called the Levinshtein ratio that computes the difference between two sequences. Generally if two sequences are exactly the same, the Levinshtein ratio will be 100 and when they gradually differ more in terms of arrangement and alphabets the ratio will decrease. </p> <p>What he will do then is he will match all the names in the staff data against the similar names, if the Levinshtein ratio is higher than 90, then the similar names will be replaced with the names in the staff data.</p> <pre><code>---\ntitle: Algorithm2\n---\n    flowchart TD\n    subgraph LOOP\n        subgraph for_each_staff_name\n        direction TB\n        A[Compute Levinshtein ratio against all other names] --&gt; B[Update other names if ratio &gt; 90]\n        end\n    end\n    B[Update other names if ratio &gt; 90] --\"when_done\"--&gt; C[Back to Algorithm1 but with name matching to update IDs]\n</code></pre>"},{"location":"concepts/#finalizing-report","title":"Finalizing Report","text":""},{"location":"concepts/#time-for-export","title":"Time For Export","text":"<p>With all the data being cleaned and labelled, Travis can now start to prepare for his reports. Since all the data are stored as one dataset, he would need to export it as individual Excel files for each stock category:</p> <pre><code>---\ntitle: Algorithm3\n---\n    flowchart TD\n    subgraph LOOP\n    A[Filter by department] --&gt; B[Filtered data with one department]\n    B[Filtered data with one department] --&gt; C[Export to Excel]\n    end\n</code></pre> <p>Now Travis gets all the files he wants, but these files are raw, he'll use VBA to add some formatting to them so that they look nice before submitting to his boss. The good news is he don't really need to do a loop to apply the macros he wrote because the macro can run on the entire specify folder:</p> <pre><code>---\ntitle: Algorithm4\n---\n    flowchart TD\n    A[Get folder that stores all the Excel files] --&gt; B[Apply macros for each file]\n</code></pre>"},{"location":"concepts/#the-output","title":"The Output","text":"<p>Here is the output that Travis will get for each of his stock category:</p> <p> </p> Before using macros and after using macros <p>Info</p> <p>That's the end for the interesting story with Travis. Check out the next page and see the functions that powered Travis' workflows.</p> <ol> <li> <p>The raw data shown are generated, and it might look clean to work with, and real world data is often messier and not well organized. The only clean data that Travis have were the staff and checklist data.\u00a0\u21a9</p> </li> </ol>"},{"location":"functions/","title":"Package Functions \ud83d\udce6","text":""},{"location":"functions/#0-introduction","title":"0. Introduction","text":"<p>Before using <code>blueautomata</code>, you must get 4 types of parameters for the function to make reference:</p> Parameters <ul> <li>Folder path: <ul> <li>The folder storing all the raw data that you want to compile</li> </ul> </li> <li>References file path: <ul> <li>File containing all the company staff details</li> <li>File containing list of abbreviations and their full name</li> </ul> </li> <li>Search key:<ul> <li>The name key that you used to identify the file category in your raw data folder</li> </ul> </li> <li>Search code: <ul> <li>The type of file characteristics that you stored in your raw data folder</li> </ul> </li> </ul>"},{"location":"functions/#01-search-code-reference","title":"0.1 Search Code Reference","text":"<p>In general, there are 3 types of search code:</p> Code Characteristics 1 Excel file that can be used directly with or without filter<sup>1</sup> 6 Excel file that can be used directly with two filters on column <code>RBC Access</code> and <code>IFAS Access</code> 10 Excel file with multiple sheets that can be used directly without filter"},{"location":"functions/#1-data-compilation","title":"1. Data Compilation","text":"<p><code>BlueAutomata</code> is a class that is build for data compilation workflow, the class takes in 5 parameters in the form of <code>path</code> and list.</p> <pre><code>BlueAutomata(    \nfolder_path = 'FOLDERPATH',\nchecklist = 'FILEPATH,\nstaff_data = 'FILEPATH',\nname_key = [],\nname_code = [],\n)\n</code></pre> <p>There is one built-in function inside the class: <code>automata_execution</code>, that uses the parameters from <code>BlueAutomata</code> to compile the raw data files stored in your specified <code>folder_path</code> and return the compiled data as a dataframe</p> <pre><code>automata_execution(self)\n</code></pre> <p>Info</p> <p>Read this to learn more on the data compilation workflow</p>"},{"location":"functions/#11-usage-example","title":"1.1 Usage Example","text":"<p>Read the first five rows of the compiled data</p> Example<pre><code>data = BlueAutomata(\nfolder_path = 'data/fakesystem',\nchecklist = 'data/checklist.xlsx',\nstaff_data = 'data/fakedata.xlsx',\nname_key = ['NASDAQ', 'KLSE', 'NYSE'],\nname_code = [1, 1, 1]\n)\ndf = data.automata_execution\ndf.head()\n</code></pre> <p>Tips</p> <p>Go to this notebook section to see the code in action using Jupyter notebook</p>"},{"location":"functions/#2-categorized-file-export","title":"2. Categorized File Export","text":"<p>To quickly export the large compiled dataset into individual Excel files for each category, you can work with the <code>BatchExport</code> class that takes two input parameters:</p> <pre><code>BatchExport(\ndestination = 'PATH',\nmasterlist = 'PATH'\n)\n</code></pre> <p>You tell the class where your <code>masterlist</code> or your compiled data is stored and where your want to store the output from the function. You can then call the function <code>batch_export</code> to start the operation:</p> <pre><code>batch_export(self)\n</code></pre>"},{"location":"functions/#21-usage-example","title":"2.1 Usage Example","text":"<p>Export <code>masterlist</code> into individuals Excel files by category:</p> Example<pre><code>df = BatchExport(\ndestination = 'data/fakedept',\nmasterlist = 'data/automataoutput.xlsx',\n)\ndf.batch_export\n</code></pre> <p>Tips</p> <p>Go to this notebook section to see the code in action using Jupyter notebook</p>"},{"location":"functions/#3-using-vba","title":"3. Using VBA","text":"<p>If you want to apply some VBA functions on the exported Excel files, you can call the class <code>automate_vba</code> that takes two parameters <code>filepath</code> and <code>macro</code>.</p> <ul> <li><code>filepath</code> is the path towards as macro-enabled notebook where your macro modules are stored.</li> <li><code>macro</code> is the name of the macro that you want to apply on the selected files</li> </ul> <pre><code>automate_vba(\nfilepath = 'MACRO_ENABLED_WORKBOOK_FILEPATH',\nmacro = 'YOURMACRONAME'\n)\n</code></pre> <p>Warning</p> <p>In this function, it requires the VBA itself to allow user to select file by popping up a file explorer window, thus the function is meant to call the VBA function, but is not able to know which files that the macro will be executed on.</p> <p>To add file selection function to your VBA program, see this.</p> <p>Inside <code>automate_vba</code> class, there is a <code>templatize</code> function that will call the macro code from your Excel workbook:</p> <pre><code>templatetize(self)\n</code></pre>"},{"location":"functions/#31-usage-example","title":"3.1 Usage Example","text":"<p>Executing the macro from your Excel workbook:</p> Example<pre><code>start = automate_vba(\nfilepath = 'vbanew.xlsm',\nmacro = 'vbanew.xlsm!Module1.kt_template'\n)\nstart.templatetize()\n</code></pre> <p>Tips</p> <p>Go to this notebook section to see the code in action using Jupyter notebook</p>"},{"location":"functions/#4-output-foresight","title":"4. Output Foresight","text":"<p>This package also provides function for you to take a preview at the output with a summary report based on your input parameter, for example:</p> Output Foresight System Matched IDs Unmatched IDs Total IDs GOOG 123 3 126 NFLX 24 5 29 SPOT 45 0 45 <p>From the table, you can see the number of <code>Matched IDs</code> that will be compiled when you execute the <code>BlueAutomata</code> function. To produce the output report, you can call the class <code>AutomataReport</code> that takes in 5 parameters:</p> <pre><code>AutomataReport(\nfolder_path = 'PATH',\nchecklist = 'PATH',\nstaff_data = 'PATH,\nname_key = [],\nname_code = [],\n)\n</code></pre> <p>Inside the <code>Automata Report</code> class, there is a function <code>automata_report_summary</code> that will produce the output summary report:</p> <pre><code>automata_report_summary(self)\n</code></pre> <p>If you would like to know what exactly are the unmatched items, you can simply call:</p> <pre><code>automata_report_unmatch(self)\n</code></pre>"},{"location":"functions/#41-usage-example","title":"4.1 Usage Example","text":"<p>Producing the output summary report</p> Example<pre><code>df = AutomataReport(\nfolder_path = 'data/fakesystem',\nchecklist = 'data/checklist.xlsx',\nstaff_data = 'data/fake_hr_data.xlsx',\nname_key = ['NASDAQ', 'KLSE', 'NYSE', 'TSE'],\nname_code = [1,1,1,1],\n)\ndf.automata_report_summary()\n</code></pre> <p>Get a list of the unmatched items</p> Example<pre><code>df = AutomataReport(\nfolder_path = 'data/fakesystem',\nchecklist = 'data/checklist.xlsx',\nstaff_data = 'data/fake_hr_data.xlsx',\nname_key = ['NASDAQ', 'KLSE', 'NYSE', 'TSE'],\nname_code = [1,1,1,1],\n)\ndf.automata_report_unmatch()\n</code></pre> <p>Tips</p> <p>Go to this notebook section to see the code in action using Jupyter notebook</p>"},{"location":"functions/#5-inconsistent-data-entry","title":"5. Inconsistent Data Entry","text":"<p>A special class named <code>Inconsistency</code> is created to deal with Excel file that:</p> <ul> <li>Does not have a <code>User ID</code> column</li> <li>Have a <code>Name</code> column, but the names are written in format different from the staff data. Even for files with only <code>Name</code> column and all the names are correct but no <code>User ID</code>, this class is still able to compile the data.<ul> <li>For example: \"Davida Faris Hill\" and \"faris Hill Davida\" are the same person</li> </ul> </li> </ul> <p>This class takes in 4 parameters, as follows:</p> <pre><code>Inconsistency(\nfilepath = 'PATH',\nstaff_data = 'PATH',\nchecklist = 'PATH',\nsheet_number = 1\n)\n</code></pre> <p>Inside the <code>Inconsistency</code> class there is a function called <code>fix_inconsistency</code> that will automatically rectify the wrong names and update the dataset with information such as <code>User ID</code>, <code>Department</code>, <code>Dept Code</code>, <code>System1</code> and <code>Cube</code></p> <pre><code>fix_inconsistency(self)\n</code></pre> <p>Of course, there will be time all the wrong names could not be fixed, you can cal the <code>inconsistency_report</code> function to extract out the name that could not be fixed:</p> <pre><code>inconsistency_report(self)\n</code></pre>"},{"location":"functions/#51-usage-example","title":"5.1 Usage Example","text":"<ul> <li>Compiling data</li> </ul> Example<pre><code>test = Inconsistency(\nfilepath = 'PATH',\nstaff_data = 'PATH',\nchecklist = 'PATH',\nsheet_number = 1\n)\ndf = test.fix_inconsistency()\n</code></pre> <ul> <li>Get summary for unmatched staff names</li> </ul> Example<pre><code>test = Inconsistency(\nfilepath = 'PATH',\nstaff_data = 'PATH',\nchecklist = 'PATH',\nsheet_number = 1\n)\ndf = test.inconsistency_report()\n</code></pre> <p>Tips</p> <p>Go to this notebook section to see the code in action using Jupyter notebook</p>"},{"location":"functions/#6-system-cube-checking","title":"6. System &amp; Cube Checking","text":"<p>This package also contains a class called <code>SystemCubeChecker</code> to update the wrongly assigned system and cube. In other words, it will update the entries where the cube names are put as system names by moving the cube names to the cube column and re-assigning a system name to them. The class takes in 3 parameters:</p> <pre><code>SystemCubeChecker(\nmasterlistpath = 'PATH',\nsystem_to_check = [],\ncube_to_assign = [],\n)\n</code></pre> <p>You can use the <code>system_cube_update</code> function to perform the reassignment:</p> <pre><code>system_cube_update(self)\n</code></pre>"},{"location":"functions/#61-usage-example","title":"6.1 Usage Example","text":"<p>Here is how you can perform the reassignment:</p> Example<pre><code>test = SystemCubeChecker(\nmasterlistpath = 'C:/Users/limzi/OneDrive/Desktop',\nsystem_to_check= ['GOOG', 'NFLX'],\ncube_to_assign='KLSE'\n)\ntest.system_cube_update()\n</code></pre> <p>Tips</p> <p>Go to this notebook section to see the code in action using Jupyter notebook</p> <ol> <li> <p>For with filter Excel file, the filter only applies to column with the following names: <code>status</code> and <code>Disable Flag *</code> \u21a9</p> </li> </ol>"},{"location":"vba_integrate/","title":"VBA Integration","text":"<p>Info</p> <p>To use the package function that support VBA macros make sure to include the following code in your macros</p>"},{"location":"vba_integrate/#macros-with-folder-selection","title":"Macros With Folder Selection","text":"<p>The package supports VBA by calling the Excel macros through Python. Currently, the Python function does not support input parameter for file path to execute the macros on. The function requires the macros to have either a popup for user to select a particular file or folder only.</p> <p>To allow macros to popup file explorer, you can write you VBA code like this, you just need to add your VBA code to the line below <code>Replace the line below with the statements you would want your macro to perform</code>:</p> VBA Code<pre><code>Sub AllWorkbooks()\n    Dim MyFolder As String 'Path collected from the folder picker dialog\n    Dim MyFile As String 'Filename obtained by DIR function\n    Dim wbk As Workbook 'Used to loop through each workbook\n    On Error Resume Next\n    Application.ScreenUpdating = False\n\n    'Opens the folder picker dialog to allow user selection\n    With Application.FileDialog(msoFileDialogFolderPicker)\n    .Title = \"Please select a folder\"\n    .Show\n    .AllowMultiSelect = False\n\n    If .SelectedItems.Count = 0 Then 'If no folder is selected, abort\n        MsgBox \"You did not select a folder\"\n    Exit Sub\n    End If\n\n    MyFolder = .SelectedItems(1) &amp; \"\\\" 'Assign selected folder to MyFolder\n    End With\n    MyFile = Dir(MyFolder) 'DIR gets the first file of the folder\n\n    'Loop through all files in a folder until DIR cannot find anymore\n    Do While MyFile &lt;&gt; \"\"\n    'Opens the file and assigns to the wbk variable for future use\n\n    Set wbk = Workbooks.Open(Filename:=MyFolder &amp; MyFile)\n\n    'Replace the line below with the statements you would want your macro to perform\n\n    wbk.Close savechanges:=True\n    MyFile = Dir 'DIR gets the next file in the folder\n    Loop\n    Application.ScreenUpdating = True\nEnd Sub\n</code></pre> <p>If you call such macros with pop-out window straight from Python, sometimes the pop-out window will not be shown, but it will be hidden. To resolve this, go to task manager and open the pop-out window like this (double click the Excel):</p> <p></p> <p>After clicking it, you will open a pop-out window for you to select a folder that you want.</p> <p>Warning</p> <p>If the file-explorer pop-out window does not show, always go to Task Manger and trigger it, otherwise you macros file will be locked and your Python program will encounter error if you rerun it.</p>"},{"location":"vba_integrate/#some-vba-macros-ideas","title":"Some VBA Macros Ideas","text":"<p>Here are some useful functions and tools that can be used to prepare your workbook for reporting:</p> FormattingDrop DownFunctions Usage Command Color a cell <code>Range(..).Interior.Color = RGB(..,..,..)</code> Bold a cell <code>Range(..).Font.Bold = True</code> Wrap a cell <code>Range(..).WrapText = True</code> Merge two cells <code>Range(..).Merge True</code> Centering <code>Range(..).HorizontalAlignment = xlCenter</code> <p>Add a drop down box to select <code>Yes</code> or <code>No</code> <pre><code>Range(..).Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _\nFormula1:=\"Yes, No\"\n</code></pre></p> <p>Row counter that count how many rows of data in your sheet <pre><code>Function countRow()\n\nDim counter As Long\nDim iRange As Range\n\nWith ActiveSheet.UsedRange\n    For Each iRange In .Rows\n        If Application.CountA(iRange) &gt; 0 Then\n            counter = counter + 1\n        End If\n    Next\nEnd With\ncountRow = counter\nEnd Function\n</code></pre></p>"},{"location":"notebooks/01BlueAutomata/","title":"01BlueAutomata","text":"In\u00a0[1]: Copied! <pre># import the class\nfrom blueautomata.data_compilation import BlueAutomata\n</pre> # import the class from blueautomata.data_compilation import BlueAutomata In\u00a0[2]: Copied! <pre>test = BlueAutomata(\n    folder_path=r\"C:\\Users\\Khor Kean Teng\\Downloads\\AUP Automata\\data\\fakesystem\",\n    checklist = 'data/checklist.xlsx',\n    staff_data = 'data/fake_hr_data.xlsx',\n    name_key= ['BSE', 'HKEX', 'KLSE', 'LSE1', 'NASDAQ', 'NYSE', 'SGX', 'SSE', 'TSE'],\n    name_code= [1, 1, 1, 1, 1, 1, 1, 1, 1],\n)\ndf = test.automata_execution()\n\n# print the dataframe\ndf.head()\n</pre> test = BlueAutomata(     folder_path=r\"C:\\Users\\Khor Kean Teng\\Downloads\\AUP Automata\\data\\fakesystem\",     checklist = 'data/checklist.xlsx',     staff_data = 'data/fake_hr_data.xlsx',     name_key= ['BSE', 'HKEX', 'KLSE', 'LSE1', 'NASDAQ', 'NYSE', 'SGX', 'SSE', 'TSE'],     name_code= [1, 1, 1, 1, 1, 1, 1, 1, 1], ) df = test.automata_execution()  # print the dataframe df.head() Out[2]: Department Dept User ID Name System1 Cube 0 Google GOOG ewbzm6yv67w33mxy9 Christopher Bruce BSE None 1 Apple AAPL wrzzdur66uzwvb0dh Michael Perez BSE None 2 Apple AAPL aurg7k1rxgmnsylsv Stephanie Carr BSE None 3 Apple AAPL np81yvtz4zcum4h39 Julia Vargas BSE None 4 Apple AAPL 99ttcx5t43r1rrwr1 Michelle Walker BSE None In\u00a0[\u00a0]: Copied! <pre># export if needed\n# df.to_excel('output.xlsx')\n</pre> # export if needed # df.to_excel('output.xlsx')"},{"location":"notebooks/01BlueAutomata/#class-blueautomata","title":"Class <code>BlueAutomata</code>\u00b6","text":"<p>A notebook to showcase the usage of <code>BlueAutomata</code> class</p>"},{"location":"notebooks/02AutomataReport/","title":"02AutomataReport","text":"In\u00a0[1]: Copied! <pre># import the class\nfrom blueautomata.automation_report import AutomataReport\n</pre> # import the class from blueautomata.automation_report import AutomataReport In\u00a0[2]: Copied! <pre>test = AutomataReport(\n    folder_path=r\"C:\\Users\\Khor Kean Teng\\Downloads\\AUP Automata\\data\\fakesystem\",\n    checklist = 'data/checklist.xlsx',\n    staff_data = 'data/fake_hr_data.xlsx',\n    name_key= ['BSE', 'HKEX', 'KLSE', 'LSE1', 'NASDAQ', 'NYSE', 'SGX', 'SSE', 'TSE'],\n    name_code= [1, 1, 1, 1, 1, 1, 1, 1, 1],\n)\ndf = test.automata_report_summary()\n\n# print the dataframe\ndf.head(n = len(df))\n</pre> test = AutomataReport(     folder_path=r\"C:\\Users\\Khor Kean Teng\\Downloads\\AUP Automata\\data\\fakesystem\",     checklist = 'data/checklist.xlsx',     staff_data = 'data/fake_hr_data.xlsx',     name_key= ['BSE', 'HKEX', 'KLSE', 'LSE1', 'NASDAQ', 'NYSE', 'SGX', 'SSE', 'TSE'],     name_code= [1, 1, 1, 1, 1, 1, 1, 1, 1], ) df = test.automata_report_summary()  # print the dataframe df.head(n = len(df)) Out[2]: System Match IDs Not Match IDs Total IDs 0 BSE 77 27 104 1 HKEX 404 90 494 2 KLSE 740 162 902 3 LSE1 314 72 386 4 SHEET1 658 141 799 5 NYSE 565 126 691 6 SGX 485 112 597 7 SSE 5 0 5 8 TSE 216 51 267"},{"location":"notebooks/02AutomataReport/#class-automatareport","title":"Class <code>AutomataReport</code>\u00b6","text":"<p>A notebook to showcase the usage of <code>AutomataReport</code> class</p>"},{"location":"notebooks/03Inconsistency/","title":"03Inconsistency","text":"In\u00a0[1]: Copied! <pre># import class\nfrom blueautomata.inconsistency import Inconsistency\nimport pandas as pd\n</pre> # import class from blueautomata.inconsistency import Inconsistency import pandas as pd In\u00a0[2]: Copied! <pre>preview = pd.read_excel('data/fakesystem/experiment/sample1.xlsx')\npreview.head()\n</pre> preview = pd.read_excel('data/fakesystem/experiment/sample1.xlsx') preview.head() Out[2]: Name Cube 0 Christopher bt Bruce Iron 1 Michael perez Bronze 2 Stephanie ccarr Metal 3 Julia bin Vargas Silver 4 Michelle WalKer Gold <ul> <li>The correct name should be <code>Christopher Bruce</code>, <code>Michael Perez</code>, <code>Stephanie Carr</code>, <code>Julia Vargas</code> and <code>Michelle Walker</code> according to the staff data.</li> </ul> In\u00a0[3]: Copied! <pre>test = Inconsistency(\n    filepath=\"data/fakesystem/experiment/sample1.xlsx\",\n    staff_data=\"data/fake_hr_data.xlsx\",\n    checklist=\"data/checklist.xlsx\",\n    sheet_number=0,\n)\n\ndf = test.fix_inconsistency()\n\ndf.head()\n</pre> test = Inconsistency(     filepath=\"data/fakesystem/experiment/sample1.xlsx\",     staff_data=\"data/fake_hr_data.xlsx\",     checklist=\"data/checklist.xlsx\",     sheet_number=0, )  df = test.fix_inconsistency()  df.head() Out[3]: Department Dept User ID Name System1 Cube 0 Google GOOG EWBZM6YV67W33MXY9 Christopher Bruce KLSE Iron 1 Apple AAPL WRZZDUR66UZWVB0DH Michael Perez KLSE Bronze 2 Apple AAPL AURG7K1RXGMNSYLSV Stephanie Carr KLSE Metal 3 Apple AAPL 99TTCX5T43R1RRWR1 Michelle Walker KLSE Gold 4 Apple AAPL 2U5PJRW18MG4XGATV David Carpenter KLSE Titanium <ul> <li>You can see that the name of the persons are being fixed</li> </ul>"},{"location":"notebooks/03Inconsistency/#class-inconsistency","title":"Class <code>Inconsistency</code>\u00b6","text":"<p>A notebook to showcase the usage of <code>Inconsistency</code> class</p>"},{"location":"notebooks/04SystemCube/","title":"04SystemCube","text":"In\u00a0[1]: Copied! <pre># import class\nfrom blueautomata.system_cube import SystemCubeChecker\nimport pandas as pd\n</pre> # import class from blueautomata.system_cube import SystemCubeChecker import pandas as pd In\u00a0[3]: Copied! <pre>preview = pd.read_excel('data/fakesystem/experiment/sample2.xlsx')\npreview.head()\n</pre> preview = pd.read_excel('data/fakesystem/experiment/sample2.xlsx') preview.head() Out[3]: Department Dept User ID Name System1 Cube 0 Google GOOG ewbzm6yv67w33mxy9 Christopher Bruce Avatar NaN 1 Apple AAPL wrzzdur66uzwvb0dh Michael Perez Ironman NaN 2 Apple AAPL aurg7k1rxgmnsylsv Stephanie Carr Thor NaN 3 Apple AAPL np81yvtz4zcum4h39 Julia Vargas Spiderman NaN 4 Apple AAPL 99ttcx5t43r1rrwr1 Michelle Walker Eternals NaN <ul> <li>You can see that the <code>System1</code> column the items are wrong, the items are cube and the system should be name <code>Marvel</code></li> </ul> In\u00a0[4]: Copied! <pre>test = SystemCubeChecker(\nmasterlistpath = 'data/fakesystem/experiment/sample2.xlsx',\nsystem_to_check= ['Avatar', 'Ironman', 'Thor', 'Spiderman', 'Eternals'],\ncube_to_assign='Marvel'\n)\n\ndf = test.system_cube_update()\n\ndf.head()\n</pre> test = SystemCubeChecker( masterlistpath = 'data/fakesystem/experiment/sample2.xlsx', system_to_check= ['Avatar', 'Ironman', 'Thor', 'Spiderman', 'Eternals'], cube_to_assign='Marvel' )  df = test.system_cube_update()  df.head() Out[4]: Department Dept User ID Name System1 Cube 0 Google GOOG ewbzm6yv67w33mxy9 Christopher Bruce Marvel Avatar 1 Apple AAPL wrzzdur66uzwvb0dh Michael Perez Marvel Ironman 2 Apple AAPL aurg7k1rxgmnsylsv Stephanie Carr Marvel Thor 3 Apple AAPL np81yvtz4zcum4h39 Julia Vargas Marvel Spiderman 4 Apple AAPL 99ttcx5t43r1rrwr1 Michelle Walker Marvel Eternals <ul> <li>You can see the system and cube are correctly updated</li> </ul>"},{"location":"notebooks/04SystemCube/#class-systemcubechecker","title":"Class <code>SystemCubeChecker</code>\u00b6","text":"<p>A notebook to showcase the usage of <code>SystemCubeChecker</code> class</p>"},{"location":"notebooks/05BatchExport/","title":"05BatchExport","text":"In\u00a0[\u00a0]: Copied! <pre># import the class\nfrom blueautomata.batch_export import BatchExport\n</pre> # import the class from blueautomata.batch_export import BatchExport In\u00a0[\u00a0]: Copied! <pre>df = pd.read_excel('data/output.xlsx')\n\ntemp = BatchExport(\n    destination='data/dept',\n    masterlist= df,\n)\n\ntemp.batch_export()\n</pre> df = pd.read_excel('data/output.xlsx')  temp = BatchExport(     destination='data/dept',     masterlist= df, )  temp.batch_export()"},{"location":"notebooks/05BatchExport/#class-batchexport","title":"Class <code>BatchExport</code>\u00b6","text":"<p>A notebook to showcase the usage of <code>BatchExport</code> class</p>"},{"location":"notebooks/06AutomateVBA/","title":"06AutomateVBA","text":"In\u00a0[\u00a0]: Copied! <pre># import the class\nfrom blueautomata.to_vba import automate_vba\n</pre> # import the class from blueautomata.to_vba import automate_vba In\u00a0[\u00a0]: Copied! <pre>temp = automate_vba(\n    filepath=r'C:\\\\Users\\\\Khor Kean Teng\\\\Downloads\\\\AUP Automata\\\\vbanew.xlsm',\n    macro = 'vbanew.xlsm!Module1.kt_template' \n)\ntemp.templatetize()\n</pre> temp = automate_vba(     filepath=r'C:\\\\Users\\\\Khor Kean Teng\\\\Downloads\\\\AUP Automata\\\\vbanew.xlsm',     macro = 'vbanew.xlsm!Module1.kt_template'  ) temp.templatetize()"},{"location":"notebooks/06AutomateVBA/#class-automatevba","title":"Class <code>AutomateVBA</code>\u00b6","text":"<p>A notebook to showcase the usage of <code>AutomateVBA</code> class</p>"}]}